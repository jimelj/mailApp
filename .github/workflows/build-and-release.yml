name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on tags starting with 'v'
permissions:
  contents: write
jobs:
  build:
    name: Build App
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]  # Target macOS and Windows
        python-version: [3.11]  # Specify Python version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history so tags are available

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create .env file from secret
        env:
          POSTFLOW_ENV_CONTENT: ${{ secrets.POSTFLOW_ENV_CONTENT }}
        run: echo "$POSTFLOW_ENV_CONTENT" > .env

      - name: Install dependencies
        run: |
          # Install base requirements
          pip install -r requirements.txt

          # Conditionally install pywin32 for Windows
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pip install pywin32==308
            pip install pypiwin32==223
            pip install pywin32-ctypes==0.2.3
          fi
        shell: bash

      - name: Determine version
        shell: bash
        run: |
          if [ -n "${{ github.ref_name }}" ]; then
            VERSION="${{ github.ref_name }}"
          elif [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="unknown"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV


      - name: Verify version
        run: | 
          echo "Version determined: ${{ env.VERSION }}"

      - name: Update VERSION file
        run: |
          echo "${{ github.ref_name }}" > VERSION
          echo "Updated VERSION file to: ${{ github.ref_name }}"

      - name: Generate Dynamic Changelog
        id: changelog
        run: |
          # Get the previous tag
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "No previous tag")
          
        # Generate changelog from commit messages
          if [ "$previous_tag" != "No previous tag" ]; then
            changelog=$(git log "$previous_tag"..HEAD --pretty=format:"- %s (%h)" --reverse | sed 's/^/  - /')
          else
            changelog=$(git log --pretty=format:"- %s (%h)" --reverse)
          fi

        #  Escape newlines for $GITHUB_ENV
            changelog="${changelog//'%'/'%25'}"
            changelog="${changelog//$'\n'/'%0A'}"
            changelog="${changelog//$'\r'/'%0D'}"

            echo "changelog=$changelog" >> $GITHUB_ENV
            echo "Changelog:"
            echo "$changelog"

      - name: Generate Update Metadata
        run: |
          echo '{
            "version": "${{ github.ref_name }}",
            "changelog": "'"${{ env.changelog }}"'",
            "download_url": {
              "windows": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/PostFlow-${{ github.ref_name }}.exe",
              "macos": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/PostFlow-${{ github.ref_name }}.dmg"
            }
          }' > latest_version.json

      - name: Upload Update Metadata
        uses: actions/upload-artifact@v3
        with:
          name: update_metadata
          path: latest_version.json
       
      - name: Build application with PyInstaller
        shell: bash
        env:
          VERSION: ${{ env.VERSION }}
        run: |
            if [ "${{ matrix.os }}" = "macos-latest" ]; then
              pyinstaller --onefile --noconsole \
                --add-data ".env:." \
                --add-data "facilityReport.xlsx:." \
                --add-data "Zips by Address File Group.xlsx:." \
                --add-data "resources/splash.png:resources" \
                --add-data "VERSION:." \
                --icon=icon.icns \
                --name=PostFlow-${{ env.VERSION }} main.py
            elif [ "${{ matrix.os }}" = "windows-latest" ]; then
              pyinstaller --onefile --noconsole \
                --add-data ".env;." \
                --add-data "facilityReport.xlsx;." \
                --add-data "Zips by Address File Group.xlsx;." \
                --add-data "resources/splash.png;resources" \
                --add-data "VERSION:." \
                --icon=icon.ico \
                --name=PostFlow-${{ env.VERSION }} main.py
            fi

      - name: Verify build artifacts
        run: |
          echo "Listing dist directory:"
          ls dist

      - name: Create DMG using hdiutil (for macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir dmg_contents
          cp -R dist/PostFlow-${{ env.VERSION }}.app dmg_contents/
          hdiutil create -volname "PostFlow-${{ env.VERSION }}" \
            -srcfolder dmg_contents \
            -ov \
            -format UDZO \
            dist/PostFlow-${{ env.VERSION }}.dmg
          rm -rf dmg_contents

      - name: Archive build artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: postflow-${{ matrix.os }}
          path: |
            dist/*.exe
            dist/*.dmg

      - name: Clean up temporary files
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            powershell Remove-Item -Path dist, .env -Recurse -Force
          else
            rm -rf dist .env || true
          fi
        shell: bash

      - name: Commit and Push Updated VERSION File
        if: always()
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -B main  # Create and switch to the main branch
          git add VERSION
          git commit -m "Update VERSION file to ${{ env.VERSION }}"
          git push --set-upstream origin main

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            release-artifacts/postflow-macos-latest/*.dmg
            release-artifacts/postflow-windows-latest/*.exe
            latest_version.json
          tag: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "PostFlow-${{ github.ref_name }}"
          body: |
            ## Changes in this release
            Add your release notes here.


        #     - name: Create GitHub Release
        # uses: ncipollo/release-action@v1
        # with:
        #   artifacts: |
        #     dist/*.exe
        #     dist/*.dmg
        #     latest_version.json
        #   tag: ${{ github.ref_name }}
        #   token: ${{ secrets.GITHUB_TOKEN }}
        #   name: "PostFlow-${{ github.ref_name }}"