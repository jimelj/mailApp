name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on tags starting with 'v'
permissions:
  contents: write
jobs:
  build:
    name: Build App
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]  # Target macOS and Windows
        python-version: [3.11]  # Specify Python version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history so tags are available

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Create .env file from secret
      #   env:
      #     POSTFLOW_ENV_CONTENT: ${{ secrets.POSTFLOW_ENV_CONTENT }}
      #   run: |
      #     echo "$POSTFLOW_ENV_CONTENT" > .env
      #     echo .env

      # Create .env file for macOS and Linux
      - name: Create .env file from secret (macOS/Linux)
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'
        env:
          POSTFLOW_ENV_CONTENT: ${{ secrets.POSTFLOW_ENV_CONTENT }}
        run: |
          echo "$POSTFLOW_ENV_CONTENT" > .env
          echo "Created .env file for macOS/Linux."
        shell: bash

      # Create .env file for Windows
      - name: Create .env file from secret (Windows)
        if: matrix.os == 'windows-latest'
        env:
          POSTFLOW_ENV_CONTENT: ${{ secrets.POSTFLOW_ENV_CONTENT }}
        run: |
          echo $env:POSTFLOW_ENV_CONTENT > .env
          echo "Created .env file for Windows."
        shell: pwsh

      - name: Verify .env File Creation
        run: |
          echo "Checking .env content..."
          cat .env

      - name: Install dependencies
        run: |
          # Install base requirements
          pip install -r requirements.txt

          # Conditionally install pywin32 for Windows
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pip install pywin32==308
            pip install pypiwin32==223
            pip install pywin32-ctypes==0.2.3
          fi
        shell: bash

      - name: Determine version
        shell: bash
        run: |
          if [ -n "${{ github.ref_name }}" ]; then
            VERSION="${{ github.ref_name }}"
          elif [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="unknown"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV


      - name: Verify version
        run: | 
          echo "Version determined: ${{ env.VERSION }}"

      - name: Update VERSION file
        run: |
          echo "${{ github.ref_name }}" > VERSION
          echo "Updated VERSION file to: ${{ github.ref_name }}"

      - name: Generate Dynamic Changelog
        id: changelog
        shell: bash
        run: |
          # Get the previous tag
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "No previous tag")
          
          # Generate changelog from commit messages
          if [ "$previous_tag" != "No previous tag" ]; then
            changelog=$(git log "$previous_tag"..HEAD --pretty=format:"- %s (%h)" --reverse | sed 's/^/  - /')
          else
            changelog=$(git log --pretty=format:"- %s (%h)" --reverse)
          fi

            changelog="${changelog//$'\n'/\\n}"


            echo "changelog=$changelog" >> $GITHUB_ENV
            echo "Changelog:"
            echo "$changelog"

      - name: Generate Update Metadata
        shell: bash
        run: |
          changelog=$(echo "${{ env.changelog }}" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo '{
            "version": "${{ github.ref_name }}",
            "changelog": "'"${{ env.changelog }}"'",
            "download_url": {
              "windows": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/PostFlow-${{ github.ref_name }}.exe",
              "darwin": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/PostFlow-${{ github.ref_name }}.dmg"
            }
          }' > latest_version.json

      - name: Upload Update Metadata
        uses: actions/upload-artifact@v3
        with:
          name: update_metadata
          path: latest_version.json
       
      - name: Build application with PyInstaller
        shell: bash
        env:
          VERSION: ${{ env.VERSION }}
        run: |
            if [ "${{ matrix.os }}" = "macos-latest" ]; then
              pyinstaller --onefile --noconsole \
                --add-data ".env:." \
                --add-data "facilityReport.xlsx:." \
                --add-data "Zips by Address File Group.xlsx:." \
                --add-data "resources/splash.png:resources" \
                --add-data "VERSION:." \
                --icon=icon.icns \
                --name=PostFlow-${{ env.VERSION }} main.py
            elif [ "${{ matrix.os }}" = "windows-latest" ]; then
              pyinstaller --onefile --noconsole \
                --add-data ".env;." \
                --add-data "facilityReport.xlsx;." \
                --add-data "Zips by Address File Group.xlsx;." \
                --add-data "resources/splash.png;resources" \
                --add-data "VERSION:." \
                --icon=icon.ico \
                --name=PostFlow-${{ env.VERSION }} main.py
            fi

      - name: Verify Bundled Files (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Listing dist directory:"
          ls dist
          echo "Verifying .env in bundled directory:"
          find dist -name ".env"
        shell: bash

      - name: Verify Bundled Files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "Listing contents of the EXE:"
          Get-ChildItem dist
        shell: pwsh

      - name: Verify build artifacts
        run: |
          echo "Listing dist directory:"
          ls dist

      - name: Create DMG using hdiutil (for macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Check disk space before starting
          echo "Disk space before cleanup:"
          df -h
          # Example: If VERSION is a file path
          ls
          ls dist
          echo "Contents of ${{ env.VERSION }}:"

          # Clean up old files to free space
          echo "Cleaning up old files..."
          rm -rf dist build dmg_contents *.egg-info

          # Check disk space after cleanup
          echo "Disk space after cleanup:"
          df -h

          # Check if the .app file was generated
          APP_PATH="dist/PostFlow-${{ env.VERSION }}.app"
          if [ ! -e "$APP_PATH" ]; then
              echo "Error: $APP_PATH was not created."
              exit 1
          fi

          # Create the DMG file
          echo "Creating DMG file for version ${{ env.VERSION }}..."
          mkdir dmg_contents
          cp -R "$APP_PATH" dmg_contents/
          hdiutil create -volname "PostFlow-${{ env.VERSION }}" \
            -srcfolder dmg_contents \
            -ov \
            -format UDZO \
            dist/PostFlow-${{ env.VERSION }}.dmg
          rm -rf dmg_contents

          # Check disk space after DMG creation
          echo "Disk space after creating DMG:"
          df -h

      - name: Archive build artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: postflow-${{ matrix.os }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.app

      - name: Clean up temporary files
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            powershell Remove-Item -Path dist, .env -Recurse -Force
          else
            rm -rf dist .env || true
          fi
        shell: bash

      - name: Commit and Push Updated Files
        if: always()
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -B main  # Create and switch to the main branch
          # Stage all changes to avoid issues with pull
          git add .
          
          # Stash any remaining changes temporarily if needed
          git stash --include-untracked || echo "No changes to stash"
          
          # Pull the latest changes from the remote main branch
          git pull origin main --rebase || echo "No changes to pull"
          
          # Apply stashed changes back
          git stash pop || echo "No stash to apply"
          
          # Add files and commit the update
          git add VERSION latest_version.json
          git commit -m "Update VERSION and latest_version.json to ${{ env.VERSION }}" || echo "No changes to commit"
          
          # Push the changes forcefully with lease to handle remote changes
          git push --force-with-lease --set-upstream origin main
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            release-artifacts/postflow-macos-latest/*.dmg
            release-artifacts/postflow-windows-latest/*.exe
            latest_version.json
          tag: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "PostFlow-${{ github.ref_name }}"
          body: |
            ## Changes in this release
            Add your release notes here.


        #     - name: Create GitHub Release
        # uses: ncipollo/release-action@v1
        # with:
        #   artifacts: |
        #     dist/*.exe
        #     dist/*.dmg
        #     latest_version.json
        #   tag: ${{ github.ref_name }}
        #   token: ${{ secrets.GITHUB_TOKEN }}
        #   name: "PostFlow-${{ github.ref_name }}"